:: StoryTitle
Settings Template


:: StoryData
{
  "ifid": "C15CE33F-61F6-4909-BB59-73EE7A3D57B1",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Start",
  "zoom": 1
}


:: Animation {"position":"500,200","size":"100,100"}
<h3>Using the setting with a conditional statement:</h3>
<<if settings.textanim>><<type 40ms>>This text is animated!<</type>><<else>>This text is not animated.<</if>>
{{{
	<<if settings.textanim>><<type 40ms>>This text is animated!<</type>><<else>>This text is not animated.<</if>>
}}}
<h3>Using the setting with a CSS class.</h3>
Toggle the Animation Setting to enable/disable the animated picture!
<div class="example-image"></div>

Notes: Wrapping an animated element with {{{<<if settings.textanim>><</if>>}}} will not update when the setting is toggled on the animated passage. Using the CSS class might not always be easy to code. Both ways are useful in different ways.
> It is however possible to automate this process, by using a function to reload the page/passage when the toggle is interacted with. You will need to know some JavaScript to mess with it.

[[Return to the Main Page|Start]]


:: Basic Macros {"position":"750,200","size":"100,100"}
<h2>Textbox</h2>\
<<textbox "_test" 2>>

<h2>Text Area</h2>\
<<textarea "_pieEssay" "">>

<h2>Radio Buttons</h2>\
What's your favorite pie?
<<radiobutton "_pie" "blueberry" autocheck>> Choice 1
<label><<radiobutton "_pie" "cherry" autocheck>> Choice 2 with a label </label>
<<radiobutton "_pie" "coconut cream" autocheck>> Choice 3

<h2>Number Box</h2>\
<<numberbox "_wager" 100>>

<h2>List Box</h2>\
<<listbox "_answer" autoselect>>
	<<option "Option 1">>
	<<option "Option 2">>
	<<option "Option 3">>
<</listbox>>

<h2>Cycle</h2>\
<<cycle "_answers" autoselect>>
	<<option "Option 1">>
	<<option "Option 2">>
	<<option "Option 3">>
<</cycle>>

<h2>Check Box</h2>\
<<checkbox "_pieBlueberry" false true autocheck>> Option 1
<label><<checkbox "_pieCherry" false true autocheck>> Option 2 with a label</label>
<<checkbox "_pieCoconutCream" false true autocheck>> Option 3

<h2>Button</h2>\
<<button "I do not do anything">><</button>>


[[Return to the Main Page|Start]]


:: Credits {"position":"325,200","size":"100,100"}
The ''Settings Template'' was created by manonamora on Twine 2/Tweego with SugarCube (2.37.3).
\
<h3>The Settings Template</h3>\
This template was made possible thanks to the assets and resources below:
> //Code, APIs and Macros://
* the [[SugarCube documentation|https://www.motoslave.net/sugarcube/2/docs/]]
* various posts from the [[Intfiction.org Forum|https://intfiction.org/c/authoring/twine]] and [[Reddit r/twinegames|https://www.reddit.com/r/twinegames/]]
* [[Chapel's Notify Macros|https://github.com/ChapelR/custom-macros-for-sugarcube-2]]
> //Assets://
* [[Canvas|https://www.canva.com]]
* [[Freesound|https://freesound.org]]
* [[GoogleFonts|https://fonts.google.com]]
\
<h3>manonamora</h3>\
You can find:
* my other templates on [[Itch|https://manonamora.itch.io/]], as well as my guides:
** [[SugarCube Guide|https://manonamora.itch.io/twine-sugarcube-guide]]
** [[Ready-to-Use Tweego and Guide|https://manonamora.itch.io/ready-to-use-tweego-folder]]
** [[ChoiceScript to SugarCube Guide|https://manonamora.itch.io/choicescript-sugarcube-guide]]
* my games and IF experiments on [[Itch|https://manonamora.itch.io/]]
* me, and ask me questions, over on [[Tumblr|https://manonamora-if.tumblr.com]] or [[my website|https://manonamora.neocities.org/]]
* my Twine Resource Masterlist on the [[IntFiction Forum|https://intfiction.org/t/twine-resource-masterlist-wiki/65903]] (an out-of-date version is rebloggable on [[Tumbr|https://manonamora-if.tumblr.com/post/700577877042888704/]]).
\
<h3>Twine and SugarCube</h3>\
[[About Twine and SugarCube|About]]
You can download Twine over on the [[Twinery.org|https://twinery.org/]] website, which includes the SugarCube format.
Thomas M. Edwards hosts the Documentation for the SugarCube format over on [[his website|https://www.motoslave.net/sugarcube/2/docs/]].

There are resources and help available with Twine and SugarCube:
* on the [[IntFiction Forum|https://intfiction.org/c/authoring/twine/46]]
* on the [[Twine Subreddit|https://www.reddit.com/r/twinegames/]]
* in the [[Twine Discord|https://discord.gg/n5dJvPp]]
* and more listed in this [[Masterlist|https://intfiction.org/t/twine-resource-masterlist-wiki/65903]]
<hr>
<h5>You can find my other SugarCube templates [[here|https://manonamora.itch.io/twine-sugarcube-templates]].</h5>


:: Start {"position":"675,75","size":"100,100"}
<h1>Settings Template</h1>
This template is meant to showcase the different types of settings included in //SugarCube// ([[documentation|https://www.motoslave.net/sugarcube/2/docs/]]), that populate the Settings Pop-up, namely the Range, Toggle, and Drop List settings, as well as their potential applications in a SugarCube project for reader accessibility. The listed settings below are not an exhaustive list of what can be included in a project, nor are they required in every SugarCube project.

To included these settings in your project, you only need to copy/paste the related code in the JavaScript and StyleSheet. The code for each setting is annotated. 
> This template is not a guide about the Settings API. For further explanations, see my [[SugarCube Guide|https://manonamora.itch.io/twine-sugarcube-guide]].

The //Settings Template// includes the following settings:
<ul>
	<li>//Font and Text Display//
		<ul>
			<li>Font type: Serif, Sans-serif, OpenDyslexic</li>
			<li>Font size: 4 sizes</li>
			<li>Line height: 4 heights</li>
			<li>Text alignment: Left/Justified</li>
		</ul>
	</li>
	<li>//Mode and Volume//
		<ul>
			<li>Theme: Dark/Light ([[Demo|Theme]])</li>
			<li>Volume Slider ([[Demo|Volume]])</li>
		</ul>
	</li>
	<li>//Accessibility//
		<ul>
			<li>Animation Toggle ([[Demo|Animation]])</li>
			<li><<link "Notifications Toggle">><<if settings.notif>><<notify>>Notifications Enabled<</notify>><</if>><</link>></li>
		</ul>
	</li>
	<li>//Saving//
		<ul>
			<li>Autosave Toggle</li>
			<li>Autoname Toggle</li>
		</ul>
	</li>
</ul>


:: StoryInit {"position":"200,75","size":"100,100"}
<<cacheaudio "song" "assets/song.wav">>


:: StoryMenu {"position":"200,200","size":"100,100"}
[[Credits]]


:: Theme {"position":"875,200","size":"100,100"}
Use the Theme Dropdown in the Settings to change the colour palette of the page.

<h1>Heading 1</h1>\
<h2>Heading 2</h2>\
<h3>Heading 3</h3>\
<h4>Heading 4</h4>\
<h5>Heading 5</h5>\
<h6>Heading 6</h6>\
<hr>
<center>''Lists:''</center>
<ul>
    <li>Item 1</li>
    <li>Item 2</li>
</ul>
<hr>
<center>''Basic Table:''</center>
<table>
<tr>
    <th>Column 1</th>
    <th>Column 2</th>
    <th>Column 3</th>    
</tr>
<tr>
    <td>Item 1</td>
    <td>Item 2</td>
    <td>Item 3</td>
</tr>
<tr>
    <td>Item 1</td>
    <td>Item 2</td>
    <td>Item 3</td>
</tr>
</table>
<hr>
<center>''Links''</center>
//Basic://
[[Basic Macros]]
//As a list://
* [[Basic Macros]]
Or 
[[Return to the Main Page|Start]]


:: Volume {"position":"625,200","size":"100,100"}
Use the Volume Slider in the Setting to change the volume.
<<button "Play Music">><<audio "song" play>><</button>> <<button "Stop Music">><<audio ":playing" stop>><</button>>

[[Return to the Main Page|Start]]


:: StoryScript [script]
//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

//~ ~ ~ ~ TABLE OF CONTENTS~ ~ ~ ~
    //~ ~ SETTINGS OPTIONS ~ ~
        // ~ Font Type
        // ~ Font Size
        // ~ Line Height
        // ~ Text Alignment
        // ~ Theme
        // ~ Volume
        // ~ Animation Toggle
        // ~ Notification Toggle
        // ~ Autosave Toggle
        // ~ Autoname Toggle
    //~ ~ MACROS ~ ~
        // ~ Notify
        
//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

//~ ~ ~ ~ SETTINGS OPTIONS ~ ~ ~ ~
    /*
     Notes:
        ~ Settings are displayed in the order it was coded in this section. If you do not like the order below, just move the code around.
        ~ Settings should fit what your project needs, so add what is necessary and remove what is unwanted.
            ~ Same with the Headers and descriptions of headers/settings. Just because I wrote it this way doesn't mean you have to.
        ~ The code below include the Settings most used or requested in Interactive-Fiction communities, when it comes to accessibility.
    */

    //~ ~ ~ ~ TEXT DISPLAY ~ ~ ~ ~
Setting.addHeader("Text Display", "Below are settings controlling how the text is displayed");
    /*
     Note:
        ~ Headers are coded as follow: 
            Setting.addHeader(name [, description]);
          with the description being optional. Other headers coded here are without descriptions.
    */
        
        //~ ~ Font Type ~ ~
    /*
        This is the most used and recommended Setting when creating a project. Since there isn't a font that everyone find comfortable to read, adding multiple options makes your project accessible to more people.
        The Setting below only account for 3 different options: a serif, sans-serif, and monospace font. It is recommended to include multiple (~2) fonts for each type, so readers have choices when playing.
            > you can name the classes based on the fonts you're importing, i'm just using the types here as an example.
    */
var settingFontFamily = ["Serif", "Sans Serif", "Monospace"]; 
    //The selectable options, name visible to the player
    //Add or remove them (each should be separated by a comma)
var fontFamily = function() {
    var $html = $("html"); 
    $html.removeClass("serif sansserif monospace"); 
        //this code above will remove any font class used before the switch
    switch (settings.fontFamily) { 
        //this section will add the relevant font class, depending on the player's choice
        case "Serif": 
            // the case name should be the same as the option defined in the first line
            $html.addClass("serif"); 
                //each option need to be set in the StyleSheet (CSS), through a class 
                //[.class]
            break;
        case "Sans Serif":
            $html.addClass("sansserif");
            break;
        case "Monospace":
            $html.addClass("monospace");
            break;
        /*
        To add a new font to the list:
            ~ Add the Name of the new option inside > var settingFontFamily
            ~ Add a CSS font class inside > $html.removeClass
            ~ Add another case block inside > switch (settings.fontFamily)

            case "Font Option"
                $html.addClass("css-tag-for-the-new-font");
                break;
        */
    }
};
Setting.addList("fontFamily", {
    //This is the actual Setting, visible to the player
    label		: "Change font type",
    desc        : "Choose between a Serif, Sans-serif, or the OpenDyslexic Font", 
        //descriptions of settings are optional, so you can edit or remove this line
    list		: settingFontFamily,
    default     : "Serif", 
        //If you delete the default line, the system will pick the first selectable name option as the new default
    onInit		: fontFamily,
    onChange	: fontFamily
});	

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Font Size ~ ~
    /*
        There are *many* ways to include a Font Size Settings, from using a size slider instead of a drop down, to using class defined in the StyleSheet (logic similar to the previous settings). The defined option below uses a Dropdown option, with pure JavaScript to assign a new font size to #passages when that Setting is interacted with.
    */
var settingFontSize = ["75%", "100%", "125%", "150%"];
    //The selectable options, name visible to the player
    //Add or remove them (each should be separated by a comma)
var resizeFont = function() {
    var size = document.getElementById("passages"); 
        //This is linked to #passages in the CSS
    /*
        From here, you have 2 options:
        - assigning automatically the selectable option (%) to the element
        - defining manually each size in other units (px, em, large/small...)

        Since the Setting can only handle one at a time, Option 1 is "hidden" as a comment.
    */
    // > Option 1:
    // size.style.fontSize = settings.fontSize;

    // > Option 2:
    switch (settings.fontSize) {
        case "75%":
            size.style.fontSize = "75%";
            // Instead of "75%", you could have "small" or "12px" or "0.75em", etc...
            // But if you're sticking to %, just use Option 1 instead.
            break;
        case "100%":
            size.style.fontSize = "100%";
            break;
        case "125%":
            size.style.fontSize = "125%";
            break;
        case "150%":
            size.style.fontSize = "150%";
            break;
    }
};
Setting.addList("fontSize", {
    label		: "Change Font Size",
    list		: settingFontSize,
    default     : "100%",
    onInit		: resizeFont,
    onChange	: resizeFont
});

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Line Height ~ ~
    /*
        This is more of an uncommon setting, as line-heights (space between each line) are not usually modified.
        The code below is essentially the same as the Font Type setting, but targetting a different CSS rule in the StyleSheet.
    */
var settingLineHeight = ["75%", "100%", "125%", "150%"];
    //The selectable options, name visible to the player
    //Add or remove them (each should be separated by a comma)
    //You can also edit it, like "75%" becomes "Small"
var lineHeight = function () {
    var $html = $("html");
    $html.removeClass("lh-small lh-medium lh-large lh-biggest");
        //this code above will remove any font class used before the switch
    switch (settings.lineheight) {
        //this section will add the relevant font class, depending on the player's choice
        case "75%":
            // the case name should be the same as the option defined in the first line
            $html.addClass("lh-small");
                //each option need to be set in the StyleSheet (CSS), through a class 
                //[.class]
            break;
        case "100%":
            $html.addClass("lh-medium");
            break;	
        case "125%":
            $html.addClass("lh-large");
            break;	
        case "150%":
            $html.addClass("lh-biggest");
            break;	
    }
};
Setting.addList("lineheight", {
    label       : "Change Line Height",
    default     : "100%",
    list        : settingLineHeight,
    onInit      : lineHeight,
    onChange    : lineHeight
});
    
    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Text Alignment ~ ~
    /*
        Unlike the previous Settings, which are Drop-down lists, this one is a Toggle, which will change the alignment of the text from justified to left (and vice-versa).
        If you are planning on including other alignments (right, center), you should change the setting into a Drop-down instead. This version can only take into account 2 options.
    */
var settingtextAlign = function () {
    if (settings.textalign) { // setting is true
        $("html").addClass("justified");
            // if enabled, the setting with add the class [.justified] to the page
            // the class defined in the StyleSheet will justify the text.
    } else { // setting is false
        $("html").removeClass("justified");
}};
Setting.addToggle("textalign", {
    label       : "Change Text Alignment",
    desc        : "If enabled, the text will be justified",
    default     : false,
    onInit      : settingtextAlign,
    onChange    : settingtextAlign
});

//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

    //~ ~ ~ ~ SOUND/THEME ~ ~ ~ ~
Setting.addHeader("Mode and Volume");

        //~ ~ Theme ~ ~
    /*
        Another very popular setting, especially since Light/Dark modes are divisive (some peeps prefer light palettes, other dark ones). While you could use [@media (prefers-color-scheme: dark/light)] to set themes depending on the user's browser preferences, it is recommended to let the player choose which ever theme they prefer in the moment (Light, Dark, or other).
        The Setting essentially allows the use of different colour palette, which can be harnessed to give different vibes to the story/game.
        
            Either way, you should ensure the colours chosen in your palette are accessible (i.e. have enough contrast to be readable and comfortable). 
    
        The example here displays a simple Light/Dark option.
    */
var settingThemeNames = ["Light", "Dark"]; 
    //The selectable options, name visible to the player
    //Add more options if wanted (each should be separated by a comma)
    //If kept at 2, you could change it to a Toggle instead.
var changeTheme = function () {
    var $html = $("html");
    $html.removeClass("rev");
    switch (settings.theme) {
        case "Dark":
            $html.addClass("rev");
            break;
        /*
         To add a new theme to the list:
            ~ Add the Name of the new Theme inside > var settingThemeNames
            ~ Add a CSS font class inside > $html.removeClass
                $html.removeClass("rev new-class")
            ~ Add another case block inside > switch (settings.theme)

            case "Theme-XYZ"
                $html.addClass("the-new-theme-class");
                break;
        */
    }
};
Setting.addList("theme", {
    label       : "Switch display mode",
    list        : settingThemeNames,
    default	    : "Dark",
    onInit      : changeTheme,
    onChange    : changeTheme
});

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Volume ~ ~
    /*
        This Setting is mainly useful if you plan on adding sound (music/SFX) to your game. It will only control the general volume (Master Volume) of the sound played, not the specific track being played (this is done with the <<audio>> macro).

        The Setting will be useless for Mobile users, as mobile browser override the volume with the device's volume. In computer browsers, players can change the volume of both their device's and the tab the game is run on, without touching this setting.

        By fiddling with the [function ()] and the Audio APIs (pretty advanced), you could create volume sliders for groups of tracks (background/voice over/ etc...).
    */
var settingMasterVolumeHandler = function () {
	SimpleAudio.volume(settings.masterVolume / 10);
};
Setting.addRange("masterVolume", {
	label    : "Master volume.",
	min      : 0,
	max      : 10,
	step     : 1,
	onInit   : settingMasterVolumeHandler,
	onChange : settingMasterVolumeHandler
});

//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 


    //~ ~ ~ ~ OTHER ACCESSIBILITY ~ ~ ~ ~
Setting.addHeader("Accessibility");

        //~ ~ Animation Toggle ~ ~
    /*
        If you are going to include *any* form of animation (changes in movement/colour/display or including .gif), you should include a setting to hide those, so users with sensitivity to animated content (e.g. epilepsy, photosensitivity, motion sickness...).

        The Toggle below is can be used for both elements defined in the StyleSheet, and in passages themselves (see the Demo page).
    */
var settingAnimation = function () {
    if (settings.textanim) { // setting is true
        $("html").removeClass("nogif");
            // if enabled, the setting with remove the class [.nogif] from the page
            // this will display any animated content defined in the Stylesheet
    } else { // setting is false
        $("html").addClass("nogif");
}};
Setting.addToggle("textanim", {
    label       : "Show Animation",
    desc        : "If disabled, there won't be any animated element on the page.",
    default     : true,
    onInit      : settingAnimation,
    onChange    : settingAnimation
});

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Notification Toggle ~ ~
    /*
        This Setting is another form of the Toggle-type, in that it *doesn't* link the setting to a CSS class. You only get a setting variable that can be used in-game to display/hide elements (like a notification popup).
        
        You can still change it to the other version, to hide your notifications/popups through the Stylesheet instead.

        ~ If your notification is animated, you could also simply combine the Animation and Notification Toggles into one single setting.
    */
Setting.addToggle("notif", { 
    label       : "Show Notification",
    desc        : "If disabled, you will not be notified.",
    default     : true,
});


//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

    //~ ~ ~ ~ SAVING (Auto/Name) ~ ~ ~ ~
Setting.addHeader("Save Settings");

    /* 
     The Config below will check:
        - the type of save (auto or browser slot)
            - for autosave: if the autosave setting  is enabled
        - then whether a passage is tagged with [noreturn]
     If the passage isn't tagged, it will save the game (auto/manual), otherwise, nothing will happen.

     If you want to have more tags restricting saving:
        - for any passage including either tags
            tags().includesAny('noreturn', 'another-tag', 'something-else')
        - for any passage including ALL the tags:
            tags().includesAll('noreturn', 'another-tag', 'something-else')
    */
Config.saves.isAllowed = function (saveType) {
    if (saveType === Save.Type.Auto) {
        // this section is just for the autosave
        if (settings.autosave && !tags().includes('noreturn')){
            // this checks that the player has enabled autosaves + isn't on a tagged passage
            return true;
        }
        return false;
    }
    else {
        if (tags().includes('noreturn')) {
            //this checks that the player isn't on a tagged passage
            return false;
        }
        return true;
    }
};

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Autosave Toggle ~ ~
    /*
        To include an Autosave Setting in your project, you need to enable at least one slot (the Config line below) and ensure the playthrough isn't saved if the player disabled the setting (Config block above).
        Then, you just need a simple toggle. 
    */
Config.saves.maxAutoSaves = 1;
Setting.addToggle("autosave", {
    label       : "Autosaves",
    default     : false,
});

    //~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

        //~ ~ Autoname Toggle ~ ~
    /* 
        Before creating the Toggle, we need to define *how* the name of a save will look like - as well, as making a clear distinction between Autosaves and Manual browser saves. 
            > By default, SugarCube uses the number of "turns" (seen passages) the player has done.

        First, we'll have to check the save type (auto/manual), then if autoname is enabled. The Autosave will always be automatically named (otherwise the player will get a prompt on every passage to enter a new name).

        The Save Name defined below will be simple: using the name of the PC + current chapter -> both saved in variables.
            > If you're not using these variables in your project, just change it to whatever fits best!
            > State.getVar("$var") = State.variables.var

        If you plan on using the name of a passage, you will need to include [passage()].
            > Note: you should be sure the name of passages are meaningful, like "Entrance to Manor" instead of "Ch10-2"
        
        Another way would be to use The Config.saves.descriptions API.
    */
//Save.onSave.add( function (save, details) {
Config.saves.descriptions = function (saveType) {
    switch (saveType) {
      //This checks what type of save we're dealing with (auto or manual)
        case 'autosave': {
            return "Autosave: " + (State.getVar("$FirstName") ? State.getVar("$FirstName") : '???') + " - " + State.getVar("$chapter");
            // the second section (after +) will check if $FirstName is defined, before either printing the value (defined) or ??? (not defined)
            // An alternative:
            // return "Autosave: " + passage();
            break;
        }
        default: {
            if (settings.autoname) {
                return (State.getVar("$FirstName") ? State.getVar("$FirstName") : '???') + " - " + State.getVar("$chapter");
            }
            else {
                return prompt("Enter Save Name:", passage());
                // I've included [passage()] here as the text inside the prompt box, but you can change it to whatever, like "" (empty) or "SAVE!" or State.getVar("$var")...
            }
        }
    }
};

Setting.addToggle("autoname", {
    label       : "Autoname",
    desc        : "Title of Save Slots if enabled.",
    default     : false,
});


//~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

    //~ ~ ~ ~ MACROS ~ ~ ~ ~
// notify.min.js, for SugarCube 2, by Chapel
// v1.1.1, 2022-07-21, 3bdbdfbe5ae47a46e4f4e52766d78701939ae9a6
;!function(){var s=/\d+m?s$/;function e(s,e,t){"string"==typeof s&&("number"!=typeof e&&(e=!1),$(document).trigger({type:":notify",message:s,delay:e,class:t||""}))}$(document.body).append("<div id='notify'></div>"),$(document).on(":notify",(function(s){s.message&&"string"==typeof s.message&&(s.message.trim(),s.class?"string"==typeof s.class?s.class="open macro-notify "+s.class:Array.isArray(s.class)?s.class="open macro-notify "+s.class.join(" "):s.class="open macro-notify":s.class="open macro-notify",s.delay?("number"!=typeof s.delay&&(s.delay=Number(s.delay)),Number.isNaN(s.delay)&&(s.delay=2e3)):s.delay=2e3,$("#notify").empty().wiki(s.message).addClass(s.class),setTimeout((function(){$("#notify").removeClass()}),s.delay))})),Macro.add("notify",{tags:null,handler:function(){var t=this.payload[0].contents,a=!1,n=!1;if(this.args.length>0){var i=s.test(this.args[0]);"number"==typeof this.args[0]||i?(a=i?Util.fromCssTime(this.args[0]):this.args[0],n=this.args.length>1&&this.args.slice(1).flatten()):n=this.args.flatten().join(" ")}e(t,a,n)}}),setup.notify=e}();
// end notify.min.js

:: StoryStylesheet [stylesheet]
/*~ ~ ~ ~ ~ ~ ~  TABLE OF CONTENTS ~ ~ ~ ~ ~ ~ ~ 
    I-      Import Fonts
        a- Google Fonts
        b- Example Local Fonts
    II-     THEME SWITCH (BASE)
        a- Body
        b- Buttons and link
        c- Textbox, Textarea, List Boxes  
        d- Extra for the slider
        e- Other HTML Elements
        f- UI Bar
        g- UI Dialog
    III-    FONT SETTINGS
        a- Font Change
        b- Alignment
        c- Line Height
    IV-     Macros and Other
        a- Notify
        b- No Gif Setting

    Notes:            
        CTRL/Cmd+F the Title to jump
        
        This template does not show all possible ways to edit a project, but more to show what the settings can do.

        To view how a UI can be further edited, see my other templates: https://manonamora.itch.io/twine-sugarcube-templates
*/

/***************************
    IMPORTS
***************************/
    /*
        This template only includes online fonts from Google, using the @import rule.
        If you want to ensure the game is playable offline (downloaded or intermittent internet), you may want to download the fonts, and include those files in your game folder, and import them with @font-face.
    */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,700;1,400;1,700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Tinos:ital,wght@0,400;0,700;1,400;1,700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap');

/* 
    Example of a local font import: 

@font-face {
    font-family: "Dyslexic";
    src: url(fonts/OpenDyslexic-Regular.otf) format("opentype");
    font-style: normal;
    font-weight: 400;
} 
    > Repeat for each font + style (normal/italics) + weight (regular/bold)
*/


/***************************
    THEME SWITCH (BASE)
***************************/
    /* 
        Created in the Theme Toggle in the JavaScript, the class [.rev] will indicate which CSS rules to use, when changing theme.
        You need to have the theme class options defined //AFTER// the base element, otherwise, your themes will be overridden by the default styling.
    */

    /*Body*/
body {
    background-color: #fafafa;
    color: #212121;
}
.rev body {
    background-color: #212121;
    color : #fafafa;
}

    /*Buttons and links*/
a {
    color: #303f9f;
    font-weight: bold;
}
.rev a {
    color: #7084ff;
}
a:hover {
    color: #1777a6;
}
.rev a:hover {
    color: #70d0ff;
}

button {
    color: #212121;
    background-color: #8ca0ff;
    border-color: #303f9f;
}
.rev button {
    color: #fafafa;
    background-color: #303f9f;
    border-color: #8ca0ff;

}
button:hover {
    background-color: #1777a6;
    border-color: #8ca0ff;
    color: #fafafa;
}
.rev button:hover {
    background-color: #70d0ff;
    border-color: #303f9f;
    color: #212121;
}
    /* Disabled should be defined after the main styling, since it's a special state */
button:disabled {
	background-color: #ccc;
	border-color: #aaa;
    opacity: 0.7;
}
.rev button:disabled {
    background-color: #3b3b3b;
    border-color: #616060;
}
    /*Textbox, Textarea, List Boxes*/
input, select, textarea {
	color: #212121;
    background-color: #ddd;
	border-color: #ccc;
}
.rev input, .rev select, .rev textarea {
	color: #fafafa;
    background-color: #424242;
	border-color: #3b3b3b;
}
input:not(:disabled):focus, select:not(:disabled):focus, textarea:not(:disabled):focus, input:not(:disabled):hover, select:not(:disabled):hover, textarea:not(:disabled):hover {
	background-color: #8ca0ff;
	border-color: #111;
}
.rev input:not(:disabled):focus, .rev select:not(:disabled):focus, .rev textarea:not(:disabled):focus, .rev input:not(:disabled):hover, .rev select:not(:disabled):hover, .rev textarea:not(:disabled):hover {
	background-color: #303f9f;
	border-color: #8ca0ff;
}
/*
> Extra for the slider (Chromium/Firefox)
    You can edit those a bit further for the button to slider or the track.
    If you add :hover after the input[type="range"] you can give extra customisation when you hover over the whole slider
    If you add :hover before the {, it will only change when the mouse hovers over the element
        ~~ Chromium
input[type="range"]::-webkit-slider-runnable-track {
	background: #222;
	border: 1px solid #444;
}
input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	background: #35a;
	border: 1px solid #57c;
}
input[type="range"]:focus::-webkit-slider-runnable-track {
	background: #222;
}
        ~~ Firefox
input[type="range"]::-moz-range-track {
	background: #222;
	border: 1px solid #444;
}
input[type="range"]::-moz-range-thumb {
	background: #35a;
	border: 1px solid #57c;
}
*/

    /*Other HTML elements*/
label {
    font-weight: bold;
}

hr {
    border-color: #212121;
}
.rev hr {
    border-color: #fafafa;
}

.passage caption, .passage td, .passage th, .passage tr {
    border: 1px solid #212121;
}
.rev .passage caption, .rev .passage td, .rev .passage th, .rev .passage tr {
    border: 1px solid #fafafa;
}

    /*UI Bar*/
#ui-bar {
    background-color: #fafafa;
    border-color: #eee;
}
.rev #ui-bar {
    background-color: #212121;
    border-color: #424242;
}

#ui-bar-toggle, #ui-bar-history [id|="history"] {
	color: #212121;
	border-color: #ccc;
}
.rev #ui-bar-toggle, .rev #ui-bar-history [id|="history"] {
	color: #fafafa;
	border-color: #212121;
}
#ui-bar-toggle:hover, #ui-bar-history [id|="history"]:hover {
	background-color: #ddd;
	border-color: #212121;
}
.rev #ui-bar-toggle:hover, .rev #ui-bar-history [id|="history"]:hover {
	background-color: #424242;
	border-color: #ddd;
}
#ui-bar-history [id|="history"]:disabled {
	color: #ccc;
	background-color: transparent;
	border-color: #ccc;
}
.rev #ui-bar-history [id|="history"]:disabled {
	color: #424242;
	background-color: transparent;
	border-color: transparent;
}

#menu ul {
	border-color: #ccc;
}
.rev #menu ul {
	border-color: #424242;
}
#menu li:not(:first-child) {
	border-top-color: #ccc;
}
.rev #menu li:not(:first-child) {
	border-top-color: #424242;
}
#menu li a {
	color: #303f9f;
}
.rev #menu li a {
	color: #8ca0ff;
}
#menu li a:hover {
	background-color: #ddd;
	border-color: #212121;
}
.rev #menu li a:hover {
	background-color: #424242;
	border-color: #212121;
}

    /*UI Dialog*/
#ui-overlay {
	background-color: #777;
}
.rev #ui-overlay {
	background-color: #212121;
}
#ui-dialog-titlebar {
	background-color: #ccc;
}
.rev #ui-dialog-titlebar {
	background-color: #424242;
}
#ui-dialog-body {
	background-color: #fff;
	border-color: #ccc;
}
.rev #ui-dialog-body {
	background-color: #212121;
	border-color: #424242;
}
#ui-dialog-body hr {
	background-color: #424242;
}
.rev #ui-dialog-body hr {
	background-color: #ccc;
}
#ui-dialog-body.settings button[id|="setting-control"] {
    background-color: #ddd;
    color: #212121;
}
.rev #ui-dialog-body.settings button[id|="setting-control"] {
    background-color: #424242;
    color: #ddd;
}
#ui-dialog-body.settings button[id|="setting-control"].enabled {
    color: #fafafa;
}

/***************************
    FONT SETTINGS
***************************/
    /*Font Change*/
        /* 
            The font type is only applied to the Passage + the body of popups here. It won't touch the sidebar or the title of popups.
            If you want it to be applied to the WHOLE page: 
                .class body {front-family: 'Font'}
        */
.sansserif .passage, .sansserif #ui-dialog-body {font-family: 'Montserrat', sans-serif;}
.monospace .passage, .monospace #ui-dialog-body {font-family:  "Roboto Mono", monospace}
.serif .passage, .serif #ui-dialog-body {font-family: 'Tinos', serif;}

    /*Alignment*/
.justified .passage {text-align: justify;}

    /*Line Height*/
.lh-small .passage {line-height: 1.2;}
.lh-medium .passage {line-height: 1.6;}
.lh-large .passage {line-height: 2.0;}
.lh-biggest .passage {line-height: 2.4;}

/***************************
    MACROS AND OTHER
***************************/
/* Chapel's Notification Macro */
#notify {
    position : fixed;
    display : block;
    width : 16em;
    right : -20em; top : 2em;
    padding : 0.5em;
    background-color : #fff;
    color : #000;
    -webkit-transition : right 0.3s;
    -moz-transition : right 0.3s;
    -o-transition : right 0.3s;
    transition : right 0.3s;
}
#notify.open { right : 0; }

    /*  No Gif Toggle
            It changes the background image when toggled.
    */
.example-image {
    width: 500px;
    height: 500px;
    background-image: url('assets/image.gif');

}
.nogif .example-image {
    background-image: url('assets/image.png');
}