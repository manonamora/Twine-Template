:: StoryTitle
Chapbook Reference Page


:: StoryData
{
	"ifid": "C15CE33F-61F6-4909-BB59-73EE7A3D57B1",
	"format": "SugarCube",
	"format-version": "2.37.3",
	"start": "Start"
}

:: Start 
<h1>The Chapbook Reference Page</h1>\
The //Chapbook Reference Page// is a one-page document referencing all the markups, inserts, modifiers and configs mentioned in the Official [[Chapbook Guide|https://klembot.github.io/chapbook/guide]]. 
This is not meant as an alternative guide for the format, since the official documentation is already top-notch. If you need explanations on how to use any of the code below, read the guide instead!
> This Reference Page does not include any APIs available in Chapbook but not mentioned in the guide. You can find all the advanced APIs in the [[Technical Documentation|https://klembot.github.io/chapbook/api/]].

<h2 id="chapbook">Chapbook</h2>\
Chapbook is a coding format created by [[Chris Klimas|https://www.patreon.com/klembot]] for Twine 2. This format was designed to be "easy to work with as an author and generate output that is a pleasure to read by players". It is recommended for new users, since it does not require any programming knowledge (unless you are attempting advanced stuff, read up on CSS and JavaScript), while still allowing for customisation.

If you are new to the format, you will want to start with the [[Official Guide|https://klembot.github.io/chapbook/guide]], which goes step by step through the process of story creation.

<h2 id="markup">Markup</h2>\
Special code to format text, based on Markdown and Twine 1.
> If not listed, use HTML/CSS instead.
<h3 id="m-text">Text Formating</h3>\
''Bold'': {{{__Bold__}}} or {{{**Bold**}}}
//Italics//: {{{_Italics_}}} or {{{*Italics*}}}
//''Both''//: {{{__*Both*__}}} or {{{_**Both**_}}} or {{{**_Both_**}}} or {{{*__Both__*}}}
<span style="font-family: monospace">Monospace</span>: {{{`Monospace`}}}
<span style="font-size: 70%; text-transform: uppercase; letter-spacing: 0.08em">Small Caps</span>: {{{~~small caps~~}}}
Ignoring Formatting: {{{\}}} (before character) like {{{\*}}}
> //Note:// Does not work inside {{{[[Links]]}}}, See TODO: link insert.
\
<h3 id="m-breaks">Breaks</h3>\
Line breaks (removes {{{<br>}}}): {{{‎‎}}} (two-space) or {{{\}}} at the end of the line
Section/Scene (adds {{{<hr>}}}): {{{***}}} (own line)
\
<h3 id="m-lists">Lists</h3>\
Bulletted: {{{* Text}}} or {{{- Text}}} or {{{+ Text}}}
Numbered: {{{# Text}}} or {{{1. Text}}}
\
<h3 id="m-links">Links</h3>\
{{{[[PassageName]]}}} or {{{[[Text|PassageName]]}}} or {{{[[Text->PassageName]]}}} or {{{[[PassageName<-Text]]}}}
> Also works with External links (Web URL)
\
<h3 id="m-forks">Forks</h3>\
Or: Special Choice Options Styling.
{{{
    > [[Link 1]]
    > [[Link 2]]
}}}

<h2 id="modif">Modifiers</h2>\
Similar to macros, not interactive.
Must be used as follow:
{{{
    [modifier]
    Text to continue
}}}
\
<h3 id="continue">Cancel Previous Modifier</h3>\
{{{[continue]}}} or {{{[cont'd]}}} or {{{[cont]}}}.
\
<h3>Text Alignment</h3>\
* Center: {{{[align center]}}}
* Left: {{{[align left]}}}
* Right: {{{[align right]}}}
\
<h3>Delayed Text</h3>\
* {{{[after TIME]}}}: in minutes, seconds or milliseconds
* {{{[after 1 second]}}}/{{{[after 1s]}}}
* {{{[after 200 milliseconds]}}}/{{{[after 200ms]}}}
* {{{[after 3 minutes]}}}/{{{after 3min}}}
> //Notes:// BUT only [[full numbers|https://github.com/mike182uk/timestring/blob/main/README.md#keywords]]! {{{[after 1s500ms]}}}
> Can be coupled with other modifier: {{{[after 1s; append]}}}
\
<h3>Invisible Notes/Comments</h3>\
{{{[note]}}} or {{{[note to myself]}}} or {{{[n.b.]}}}
also accepts {{{[fixme]}}} and {{{[todo]}}}

<h2>Inserts</h2>\
Another type of macro, usually interactive.
Is formatted as:
{{{
    {insert, parameters}
}}}
\
<h3>Regular Links</h3>\
{{{
    {link to: 'PassageName', label: 'Some Text'}
    {link to: 'PassageName'}
    {link to: 'URL', label: 'Website'}
    {link to: variable, label: 'Text in **bold**'}
}}}
\
<h3>Reveal Links</h3>\
{{{
    {reveal link: 'text to click', text: 'replacing text'}
    {reveal link: 'text to click', passage: 'PassageName'}
}}}
> //Note:// inserting a passage will also show the return to line
\
<h3>Cycling Links</h3>\
{{{
    {cycling link, choices: ['Choice 1', true, 1]}

    {cycling link for: 'variable', choices: ['Choice 1', true, 1]}
}}}
\
<h3>Text Input</h3>\
Output will always be a string.
{{{
    {text input}
    {text input for: 'variable'}
    {text input for: 'secret', required: false}
}}}
> //Notes:// if the variable is already defined, it will show the editable value to the player.
> Unless {{{required}}} is false, the player won't move further until the input is filled
\
<h3>Dropdown</h3>\
{{{
    {dropdown menu, choices: ['Choice 1', 1, true]}
    {dropdown menu for: 'meal', choices: ['Breakfast', 'Lunch', 'Dinner']}
}}}
\
<h3>Embed Passage</h3>\
{{{
    {embed passage: 'PassageName'}
    {embeded passage: variable}
}}}
\
<h3>Embed Image</h3>\
{{{
    {embed image: 'URL', alt: 'text'}
    {embed image: 'assets/cave.jpeg', alt: 'Cave entrance'}
    {embed image: 'assets/fancy-border.jpeg', alt: ''}
}}}
> //Note:// Also has a specific tag for Flickr and Unsplash images ([[Documentation|https://klembot.github.io/chapbook/guide/multimedia/images.html]]), but I'd recommend local URL, instead.
\
<h3>Embed Video</h3>\
Only YouTube, not auto playback or accessibility features:
{{{
    {embed YouTube video: 'URL'}
}}}
\
<h3>Back/Return Link</h3>\
{{{
    {back link, label: 'Some Text'}
}}}
> If {{{label}}} is not used, shows link named //Back//.
\
<h3>Restart Link</h3>\
{{{
    {restart link, label: 'Some Text'}
}}}
> If {{{label}}} is not used, shows link named //Restart//.
\
<h3>Theme Switcher</h3>\
{{{
    {theme switcher}
    {theme switcher, darkLabel: 'Use Light Theme', lightLabel: 'Use Dark Theme'}
}}}
> //Note:// Most useful if you override the content of the right footer, and want to place it somewhere else.

<h2>Variables</h2>\
Definition or change in variables need to be done at the start of a passage, separated by two dashes {{{--}}}:
{{{
    variable: value 
    --
    The actual passage
}}}
> //Notes:// Defining all variables at start helps avoid errors 
> Can't use {{{browser}}}, {{{engine}}}, {{{now}}}, {{{passage}}}, {{{random}}}, {{{story}}} as var names.
\
<h3>Variable Types</h3>\
Booleans (true/false), Numerical (1-0), Strings (words)
{{{
    boolean: true 
    numberical: 0
    string: 'some words'
    --
    The actual passage
}}}
\
<h3>Displaying Variables</h3>\
{{{
    {variable}
}}}
> Can only display variable as is. If you want to combine value, create a separate variable (ex: {{{var1: var2 + var3}}})
\
<h3>Changing Values</h3>\
{{{
    amount: amount + 1
        -> value + 1 
    full_name: first + " " + last
        -> 'John Doe'
    check: age === 3
        -> true (or false)
}}}
> See Conditional Display (below) for full list operators
\
<h4>Advanced Variable Change</h4>\
To attach a conditional value:
{{{
    variable (var2 > value): value
    transportation (kilometers > 1000): 'plane'  
    language (country === 'Australia' || country === 'United States'): 'English'
}}}
\
<h3>Random Variable</h3>\
Built-in dice roll/coin flipper. Add to {{{random}}}:
{{{
    random.[dice]
    random.d4 
    variable: random.d4 
    [if random.d4 === 4]
}}}
* {{{.coinFlip}}} (true/false)
* {{{.fraction}}} (0-1, decimal)
* {{{.d4}}}, {{{.d5}}}, {{{.d6}}}, {{{.d8}}}, {{{.10}}}, {{{.12}}}, {{{.20}}}, {{{.d25}}}, {{{.d50}}}, {{{.d100}}} (full number)
> //Note:// everytime {{{random}}} is use, it rolls a ''new'' number!
\
<h3>Object Variables</h3>\
{{{
    object.property.sub
    pc.skills.agility: 4
}}}
\
<h4>Built-In Objects</h4>\
Useful for display/conditional. Avoid changing it.
Not an exhaustive list.
* {{{browser}}}:
** {{{.darkTheme}}}: if Dark theme enabled (true/false)
** {{{.darkSystemTheme}}}: user browser preference (true/false)
** {{{.height}}}/{{{.width}}}: window size (pixel)
** {{{.online}}}: connected to the internet (true/false)
* {{{engine}}}:
** {{{.version}}}: version of Chapbook ('2.3.0')
* {{{now}}}:
** {{{.datestamp}}}: current date (m/d/y - user dependent)
** {{{.timestamp}}}: current time (h:m:s - user dependent)
** {{{.year}}}/{{{.month}}}/{{{.day}}}
** {{{.hour}}}/{{{.minute}}}/{{{.second}}}
** {{{.monthName}}}/{{{.weekdayName}}}
* {{{passage}}}:
** {{{.from}}}: last passage visited (or undefine if first)
** {{{.fromText}}}: last link clicked 
** {{{.name}}}: current passage name 
** {{{.visits}}}: times visited current passage
* {{{story}}}:
** {{{.name}}}: name of project

<h2>Conditional Display</h2>\
Formatted like an insert. ''Can only be used in passage''.
{{{
    [if condition]
    [unless condition]
    [else]
}}}
\
<h3>Accepted Operators</h3>\
Essentially JavaScript Operators:
* {{{===}}}: equal to (explicit)
* {{{!==}}}: not equal to
* {{{>}}}/{{{>=}}}: greater than (or equal to)
* {{{<}}}/{{{<=}}}: lesser than (or equal to)
* {{{!}}}: not 
* {{{&&}}}: and 
* {{{||}}}: or
* {{{()}}} (parentheses for more complex checks)
\
<h3>Examples of Basics Conditionals</h3>\
{{{
    [if variable] (if true)
    [if !variable] (if not true)
    [if var === 3]
    [if var >= (var2 + var3)]
    [if (var1 + var2) < 45]
}}}
\
<h3>Unless Condition</h3>\
Essentially:
{{{
    [unless condition]
        -> is the same as
    [if !condition]
}}}
\
<h3>Else Modifier</h3>\
For all the situation not covered by the single previous {{{[if]}}}:
{{{
    [if variable]
        ...
    [else]
        ...
}}}
\
<h3>Some Notes</h3>\
Conditionals ''cannot be nested'', and different {{{[if]}}} will run ''independently'' to the other ones. Either combine conditions (with {{{&&}}} or {{{||}}}) or create variables merging those conditions.

To return to the story after a conditional block is coded, use {{{[continue]}}}.

To always display or hide a conditional, use {{{[ifalways]}}} or {{{[ifnever]}}}. Subsequent {{{[else]}}} will be affected.

<h2>Audio</h2>\
Two different types: sound effect and ambient audio. Only one ambient track at a time, and loops. Sound effects one-off and can be played simultaneously (at once only, not adding while one is played).
Both need to be defined before being used.
\
<h3>Sound Effect</h3>\
{{{
    sound.effect.name.[url/description]
    {sound effect: 'name', volume: [0-1]}

    sound.effect.explosion.url: 'boom.mp3'
    sound.effect.explosion.description: 'a large explosion'

    {sound effect: 'explosion'}
    {sound effect: 'boom', volume: 0.8}
}}}
\
<h3>Ambient Audio</h3>\
{{{
    sound.ambient.name.[url/description]
    {ambien sount: 'name', volume: [0-1]}

    sound.ambient.forest.url: 'forest.mp3'
    sound.ambient.forest.description: 'midday forest sounds'

    {ambient sound: 'forest'}
    {ambient sound: 'lake', volume: 0.4}
}}}
To replace the track, use another {{{ {ambient sound:} }}} with a different track name.
To stop all ambient sound: {{{ {no ambient sound} }}}
\
<h3>Audio variables</h3>\
Two variables:
* {{{sound.volume}}}: controls master volume (0-1, decimal)
* {{{sound.mute}}}: temporarily mute all sound (true/false)
\
<h3>Manual Control</h3>\
To bypass restriction of sounds, and create more complex effects:
{{{
    sound.effect[name].playing: true/fase
    sound.ambient.[name].playing: true/false 
    
    sound.ambient.forest.playing: true
    sound.ambient.rain.playing: true
    sound.effect.bird.playing: true
}}}
> //Note:// the track description won't run this way. But you can use {{{<audio>}}} for this.

<h2>Config Styles</h2>\
<h3>Page Elements</h3>\
Chapbook HTML looks like below. All elements can be targetted in the StyleSheet. Some can be targetted through the Config.
{{{
    <body>
        <state-css-variable>/<state-dark-theme-css-variable-override>
            <#backdrop>
                <page-skip>/<page-transition>
                    <#page>
                        <header>
                            <#left><#center><#right>
                        <article>[The passage]
                        <footer>
                            <#left><#center><#right>
}}}
> //Note:// By default, {{{footer#left}}} and {{{footer#right}}} are pre-filled: respectively, Project Title and Theme/Restart Link
\
<h3>Header and Footer</h3>\
Each with 6 locations to fill (left, center, right). Can be pure text, embed passage, code, etc...
{{{
-> header
    config.header.left: "[[About]]"
    config.header.center: story.name
    config.header.right: "Money left: {money}"

-> footer
    config.footer.left: '{embed passage: "Saves"}'	
    config.footer.center: '{back link}'
    config.footer.right: '{restart link}'
}}}
> //Note:// Changing the right footer will remove the theme switch - which is by default defined by the user's browser's preferences (otherwise, light is default).
<h4>Borders</h4>\
{{{
-> type
    config.style.page.footer.border
    config.style.page.header.border
    config.style.dark.page.footer.border
    config.style.dark.page.header.border
        -> 'none', 'thin-line', 'thick-line'

-> color
    config.style.page.footer.borderColor
    config.style.page.header.borderColor
    config.style.dark.page.footer.borderColor
    config.style.dark.page.header.borderColor
}}}
> //Note:// yeah, you can indicate a different type for either theme. See below for colours.
\
<h3>Fonts</h3>\
Will accept any font the user has or is imported (StyleSheet). Include stacks when possible.
{{{
    config.style.page.font: 'font size type'
    config.style.page.font: 'Arial 14'
    config.style.page.font: 'Arial/Hevetica/sans-serif 1rem'
    config.style.page.font: 'Arial 110% bold italics underline small caps'
}}}
Following elements can change their fonts:
{{{
-> main section
    config.style.page.font
    config.style.page.link.font
    config.style.page.link.active.font

-> header
    config.style.page.header.font
    config.style.page.header.link.font
    config.style.page.header.link.active.font

-> footer
    config.style.page.footer.font
    config.style.page.footer.link.font
    config.style.page.footer.link.active.font
}}}
<h4>Import Fonts (Google)</h4>\
{{{
    config.style.googleFont: 'embed code <link> with stylesheet'
    config.style.googleFont: '<link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">'
}}}
<h4>Import Fonts (TypeKit/Adobe)</h4>\
{{{
    config.style.typekitFont: 'embed code <link> with stylesheet'
    config.style.typekitFont: '<link rel="stylesheet" href="https://use.typekit.net/abdefgh.css">'
}}}
<h4>Import Fonts (Local)</h4>\
{{{
    config.style.fonts.[tag].[url/name]

    config.style.fonts.leagueSpartan.url: 'fonts/league-spartan.woff2'
    config.style.fonts.leagueSpartan.name: 'League Spartan'
}}}
> //Note:// You can also simply use the {{{@import}}} or {{{@font-family}}} CSS rules in the StyleSheet to import fonts.
\
<h3>Colours</h3>\
Chapbook uses the [[Reasoable Colors|https://www.reasonable.work/colors/]] palette. Code for the hues and shades are tabled in the [[documentation|https://klembot.github.io/chapbook/guide/customization/fonts-and-colors.html#colors]]. But it will also accept other notations (e.g. HEX or HSLA).
{{{
    config.style.backdrop: 'red-1' 
    config.style.backdrop: '#ccc'
    config.style.backdrop: 'hsla(0%, 65%, 48%, 0.75)'
}}}
Following elements can change colour (incl. dark theme):
{{{
-> light theme
    config.style.backdrop
    config.style.page.color
    config.style.page.link.color
    config.style.page.link.lineColor
    config.style.page.link.active.color
    config.style.page.link.active.lineColor

-> dark theme
    config.style.dark.backdrop
    config.style.dark.page.color
    config.style.dark.page.link.color
    config.style.dark.page.link.lineColor
    config.style.dark.page.link.active.color
    config.style.dark.page.link.active.lineColor
}}}
You can also define the default theme with or disable switching:
{{{
    config.style.page.theme.override
        -> 'light', 'dark', [anything else will be system based]
    
    config.style.page.theme.enableSwitching
        -> false, true
}}}
> //Note:// if {{{enableSwitching}}} is disabled, any instance of {{{ {theme switcher} }}} will be hidden, and the Light Theme will only be used.
\
<h3>Page Styling</h3>\
Other elements that can be targetted. Default is last option listed.
> //Page Border//
{{{
    config.style.page.style.border
        -> 'none', 'thin-line', 'thick-line', 'shadow'
    -> if line is selected
        config.style.page.style.borderColor
        config.style.dark.page.style.borderColor
}}}
> //Page Transition//
{{{
    config.body.transition.name
        -> 'none', 'fadeInOut', 'crossfade'
    -> if other than 'none'
        config.body.transition.duration
}}}
> //Vertical Alignment//: where text is displayed by default
{{{
    config.style.page.verticalAlign
        -> 'top', 'bottom', 'center'
}}}
> //Fork Styling//
{{{
    config.style.page.fork.divider.style
        -> 'dashed', 'double', 'solid', 'none', 'dotted'
    -> if other than 'none'
        config.style.page.fork.divider.size 
        config.style.page.fork.divider.color
}}}
\
<h3>Font Scaling</h3>\
Font is scaled depending on screen size. Essentially increase the font size as the user's browser window widens.
To disable it:
{{{
    config.style.fontScaling.enabled: false
}}}
Other scaling configs:
{{{
    config.style.fontScaling.baseViewportWidth (in px)
        -> default is 1000
    config.style.fontScaling.addAtDoubleWidth (in px)
        -> default is 6
    config.style.fontScaling.maximumSize (any unit)
}}}
> //Note:// if one of those configs is not set correctly, none will work.

<h2>Custom Code</h2>\
For Advanced users, as recommended. But go wild!
\
<h3>JavaScript</h3>\
As replacement for {{{<script>}}}. Avoid until last resort. Or because you want to do code crimes :P
Example:
{{{
    [JavaScript]
      document.title = 'A Sticky Pickle';
    [continue]
      Until page is refreshed, the tab's name will be named 'A Sticky Pickle'
}}}
<h4>JavaScript Output</h4>\
Done with the function {{{write()}}}. 
Example will list numbers on page:
{{{
    [JavaScript]
    for (let i = 1; i <= 10; i++) {
        write(i + '... ');
    }
}}}
Defined variables can also be used, with {{{ ${var} }}}:
{{{
    [JavaScript]
    write(`The sky is ${color}.`);
}}}
<h4>Define Variables with JavaScript</h4>\
With the {{{engine.state}}} API:
{{{
    [JavaScript]
    engine.state.set('weather', 'sunny');
        -> {weater} prints as sunny
}}}
<h4>CSS and Styling</h4>\
As replacement for {{{<style>}}}. Only works for one passage.
{{{
    [CSS]
    #page article {
        color: green;
    }

}}}
\
<h3>Custom Insert</h3>\
Done with {{{engine.extend()}}} function (required to check Chapbook version), and {{{engine.template}}} API. Best to put in your JavaScript. To print custom text on the page. 
Example below is for a basic display of an emoji:
{{{
    engine.extend('2.0.0', () => {
        engine.template.inserts.add({
            match: /^smiley face$/i,
            render: () => '😀'
        });
    });

    -> creates the insert {smiley face}
}}}
You can up the complexity, adding parameters to the insert, and even parsing the value of variable. This can be quite useful for things like player/NPC pronouns (outside of variables).
> //Note:// Knowledge of [[Chapbook's API|https://klembot.github.io/chapbook/api/index.html]] is highly recommended!
\
<h3>Custom Modifers</h3>\
Done with {{{engine.extend()}}} function (required to check Chapbook version), and {{{engine.template}}} API. Best to put in your JavaScript.
Example below will format the text into uppercase:
{{{
    engine.extend('2.0.0', () => {
        engine.template.modifiers.add({
            match: /^uppercase$/i,
            process(output) {
            output.text = output.text.toUpperCase();
            }
        });
    });

    -> creates the modifier [uppercase]
}}}
Aside from changing the text formatting, you could even change the content of the text (ex: removing letters) or create new logics.
> //Note:// Knowledge of [[Chapbook's API|https://klembot.github.io/chapbook/api/index.html]] is highly recommended!

<h2>That's the End!</h2>
If you've gotten this far... hello!

Go throw some money at Chris Klimas for creating Chapbook and making a dope-ass [[guide|https://klembot.github.io/chapbook/guide/]] for the format that is super comprehensive. And essentially making a format that's easy to get into! And also, for maintaining the Twine engine. Here's his [[Patreon|https://www.patreon.com/klembot]].


:: StoryCaption
//Table of Content//
<a href="#chapbook">Chabook</a>
<a href="#markup">Markup</a>
    <a href="#m-text">Text Formatting</a>
    <a href="#m-breaks">Breaks</a>
    <a href="#m-lists">Lists</a>
    <a href="#m-links">Links</a>
    <a href="#m-forks">Forks</a>
<a href="#modif">Modifiers</a>
    <a href="#continue">Cancel Previous Modifier</a>
<a>Inserts</a>
<a>Variables</a>
<a>Conditional Display</a>
<a>Audio</a>
<a>Config Styles</a>
<a>Custom Code</a>
[Add the logo of Chapbook as Banner]

:: StyleSheet [stylesheet]

/* Inline #15 | https://twinery.org/2/#/stories/253368d7-4c33-4791-ba70-41a5cc46603f/play */

#menu {
  display: none;
}

#ui-bar-tray {
}

#ui-bar-history {
  display: none;
}

/* Inline #12 | https://twinery.org/2/#/stories/253368d7-4c33-4791-ba70-41a5cc46603f/play */

#ui-bar-body {
  /* margin: 2.5em 0; */
  margin: 1.5em 0;
}


:: TODO!!
- Cross all the TODOs
- add ID-s to all headers
- add header link to sidebar 
- add Chapbook logo to the Banner
- finish Styling (maybe add a light mode?)
- final run/read
- publish